@mixin image2x($image, $width: 'auto', $height: 'auto') {
  @media (min-resolution: 144dpi) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin component {
  display: inline-block;
  position: relative;
  overflow: hidden;
  text-overflow: ellipsis;
  line-height: rhythm(1);
  min-height: rhythm(1);
  margin: 0;
}

// this mixin allows inserting inline-based components without concerns about vertical dimension
@mixin componentsContainer() {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
}

@mixin hole() {
  &__hole {
    @include componentsContainer();
    height: 100%;
    justify-content: center;
  }
}

// this mixin remove additional space for ascenders/descenders
// should be applied for inline-block elements with height < line-height
@mixin removeDescenders() {
  line-height: rhythm(0.66);
  min-height: 0;
}

@function fontSize($fontsizeKey) {
  // scss-lint:disable NameFormat
  @return map-get($fontSizes, $fontsizeKey);
  // scss-lint:enable NameFormat
}

@mixin uppercaseText($letterSpacing: null) {
  text-transform: uppercase;
  @if $letterSpacing != null {
    letter-spacing: $letterSpacing;
  } @else {
    letter-spacing: 0.03rem;
  }
}

// Used for messing with fonts and baseline
// Sets the font size and line height
// fontsizeName - string
// lineHeight - int, number of baselines
@mixin typeVariant($fontsizeName, $lineHeight: null, $shift: null, $push: null) {

  $remFontsize: fontSize($fontsizeName);

  @if $remFontsize != null {
    font-size: $remFontsize;
  }

  @if $lineHeight != null {
    $remLineHeight: rhythm($lineHeight);
    line-height: $remLineHeight;
  }

  @if $shift != null {
    padding-top: rhythm($shift);
  }

  @if $push != null {
    margin-bottom: rhythm($push);
  }
}

// set a value as a multiple of baselines
@function rhythm($baselines) {
  @return $baselines * $baseline;
}

@mixin sgBreakpoint($name) {
  // scss-lint:disable NameFormat
  $media: map-get($breakpointsMap, $name);
  // scss-lint:enable NameFormat
  @if($media) {
    @media #{$media} {
      @content;
    }
  } @else {
    @error 'Breakpoint "#{$name}" does not exist';
  }
}

@mixin sgListBasicStyles() {
  @include component;
  overflow: visible; // move baseline from margin to the last line box
  display: block;
  margin: 0;
  padding: 0;
  list-style: none;
}

// set a value as a multiple of default gutter
@function gutter($size) {
  @return $size * $layoutDefaultPadding;
}

// https://css-tricks.com/snippets/sass/strip-unit-function/
// Remove the unit of a length
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number
@function stripUnit($number) {
  // scss-lint:disable NameFormat
  @if type-of($number) == 'number' and not unitless($number) {
  // scss-lint:enable NameFormat
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function toPx($rems) {
  @return stripUnit($rems) * stripUnit($baseFont) * 1px;
}
